import { EventEmitter, OnChanges } from '@angular/core';
import { HSLA, RGBA } from './helpers/color.interfaces';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './checkboard.component';
import * as ɵngcc3 from './coordinates.directive';
export declare class AlphaComponent implements OnChanges {
    hsl: HSLA;
    rgb: RGBA;
    pointer: Record<string, string>;
    shadow: string;
    radius: number | string;
    direction: 'horizontal' | 'vertical';
    onChange: EventEmitter<any>;
    gradient: Record<string, string>;
    pointerLeft: number;
    pointerTop: number;
    ngOnChanges(): void;
    handleChange({ top, left, containerHeight, containerWidth, $event }: {
        top: any;
        left: any;
        containerHeight: any;
        containerWidth: any;
        $event: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AlphaComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AlphaComponent, "color-alpha", never, { "direction": "direction"; "hsl": "hsl"; "rgb": "rgb"; "pointer": "pointer"; "shadow": "shadow"; "radius": "radius"; }, { "onChange": "onChange"; }, never, never>;
}
export declare class AlphaModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AlphaModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AlphaModule, [typeof AlphaComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.CheckboardModule, typeof ɵngcc3.CoordinatesModule], [typeof AlphaComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AlphaModule>;
}

//# sourceMappingURL=alpha.component.d.ts.map