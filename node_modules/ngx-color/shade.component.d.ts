import { EventEmitter, OnChanges } from '@angular/core';
import { HSLA, RGBA } from './helpers/color.interfaces';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './coordinates.directive';
export declare class ShadeComponent implements OnChanges {
    hsl: HSLA;
    rgb: RGBA;
    pointer: Record<string, string>;
    shadow: string;
    radius: string;
    onChange: EventEmitter<any>;
    gradient: Record<string, string>;
    pointerLeft: number;
    pointerTop?: number;
    ngOnChanges(): void;
    handleChange({ left, containerWidth, $event }: {
        left: any;
        containerWidth: any;
        $event: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShadeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ShadeComponent, "color-shade", never, { "hsl": "hsl"; "rgb": "rgb"; "pointer": "pointer"; "shadow": "shadow"; "radius": "radius"; }, { "onChange": "onChange"; }, never, never>;
}
export declare class ShadeModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ShadeModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ShadeModule, [typeof ShadeComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.CoordinatesModule], [typeof ShadeComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<ShadeModule>;
}

//# sourceMappingURL=shade.component.d.ts.map