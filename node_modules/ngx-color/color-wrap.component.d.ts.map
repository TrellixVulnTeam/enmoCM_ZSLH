{"version":3,"file":"color-wrap.component.d.ts","sources":["color-wrap.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Color, HSLA, HSVA, RGBA } from './helpers/color.interfaces';\nexport interface ColorEvent {\n    $event: Event;\n    color: Color;\n}\nexport declare class ColorWrap implements OnInit, OnChanges, OnDestroy {\n    className?: string;\n    color: HSLA | HSVA | RGBA | string;\n    onChange: EventEmitter<ColorEvent>;\n    onChangeComplete: EventEmitter<ColorEvent>;\n    onSwatchHover: EventEmitter<ColorEvent>;\n    oldHue: number;\n    hsl: HSLA;\n    hsv: HSVA;\n    rgb: RGBA;\n    hex: string;\n    source: string;\n    currentColor: string;\n    changes: Subscription;\n    disableAlpha?: boolean;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    setState(data: any): void;\n    handleChange(data: any, $event: any): void;\n    /** hook for components after a complete change */\n    afterValidChange(): void;\n    handleSwatchHover(data: any, $event: any): void;\n}\nexport declare class ColorWrapModule {\n}\n"]}