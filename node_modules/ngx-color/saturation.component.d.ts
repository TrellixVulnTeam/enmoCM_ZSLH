import { EventEmitter, OnChanges } from '@angular/core';
import { HSLA, HSVA, HSVAsource } from './helpers/color.interfaces';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './coordinates.directive';
export declare class SaturationComponent implements OnChanges {
    hsl: HSLA;
    hsv: HSVA;
    radius: number;
    pointer: Record<string, string>;
    circle: Record<string, string>;
    onChange: EventEmitter<{
        data: HSVAsource;
        $event: Event;
    }>;
    background: string;
    pointerTop: string;
    pointerLeft: string;
    ngOnChanges(): void;
    handleChange({ top, left, containerHeight, containerWidth, $event }: {
        top: any;
        left: any;
        containerHeight: any;
        containerWidth: any;
        $event: any;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SaturationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SaturationComponent, "color-saturation", never, { "hsl": "hsl"; "hsv": "hsv"; "radius": "radius"; "pointer": "pointer"; "circle": "circle"; }, { "onChange": "onChange"; }, never, never>;
}
export declare class SaturationModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SaturationModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<SaturationModule, [typeof SaturationComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.CoordinatesModule], [typeof SaturationComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<SaturationModule>;
}

//# sourceMappingURL=saturation.component.d.ts.map