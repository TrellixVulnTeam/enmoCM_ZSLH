{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../esm2015/projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../esm2015/projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../projects/swimlane/ngx-charts/src/lib/events.ts","../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","platformId","clz","type","cssClass","ngAfterViewInit","position","bind","_this","isPlatformBrowser","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Inject","PLATFORM_ID","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","approxHeight","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","abs","sin","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","t","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","AlignmentTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","navigator","userAgent","match","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","&","'","`","\"","<",">","entryComponents","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","runCount","timestamp","frameVal","progress","round","finished","requestAnimationFrame","val","decimalChecker","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","D0Types","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","LineChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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,UACA,UACA,YAGJ,CACEtF,KAAM,OACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACEtF,KAAM,QACN6b,YAAY,EACZhH,MAAO,aACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,MACN6b,YAAY,EACZhH,MAAO,aACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN6b,YAAY,EACZhH,MAAO,aACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,SACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,UACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,SACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN6b,YAAY,EACZhH,MAAO,UACPvP,OAAQ,CACN,UACA,UA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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\n  top = 'top' as any,\n  bottom = 'bottom' as any,\n  left = 'left' as any,\n  right = 'right' as any\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: any;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: AlignmentTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: any;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2, @Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip/tooltip.service';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === 'legend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view;\n  @Input() showLegend = false;\n  @Input() legendOptions: any;\n\n  // remove\n  @Input() data;\n  @Input() legendData;\n  @Input() legendType: any;\n  @Input() colors: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  chartWidth: any;\n  title: any;\n  legendWidth: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\n        if (this.legendType === 'scaleLegend') {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === 'right'\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): string {\n    if (this.legendOptions.scaleType === 'linear') {\n      return 'scaleLegend';\n    } else {\n      return 'legend';\n    }\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\n\n@Component({\n  selector: 'base-chart',\n  template: ` <div></div> `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(\n    protected chartElement: ElementRef,\n    protected zone: NgZone,\n    protected cd: ChangeDetectorRef,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient;\n  @Input() label;\n  @Input() offset;\n  @Input() width;\n  @Input() height;\n\n  x: any;\n  y: any;\n  transform: any;\n  strokeWidth: any;\n  textAnchor: any;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case 'top':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'bottom':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'left':\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case 'right':\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s, max = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight;\n  @Input() width;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: string = 'middle';\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: any;\n  ticks: any;\n  tickFormat: (o: any) => any;\n  height: number = 0;\n  approxHeight: number = 10;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({ height: this.approxHeight });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height: this.height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function (d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = 'end';\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = 'middle';\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"'bottom'\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() ticks: any[];\n  @Input() xAxisTickInterval;\n  @Input() xAxisTickCount: any;\n  @Input() xOrient: string = 'bottom';\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: any;\n  transform: any;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === 'left'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === 'right'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineWidth;\n  @Input() height;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: any = 6;\n  tickPadding: any = 3;\n  tickSpacing: any;\n  verticalSpacing: number = 20;\n  textAnchor: any = 'middle';\n  dy: any;\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any;\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({ width: this.width });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function (d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case 'top':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'bottom':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'left':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'end';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case 'right':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'start';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() yAxisTickInterval;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: string = 'left';\n  @Input() referenceLines;\n  @Input() showRefLines;\n  @Input() showRefLabels;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: any;\n  offset: any;\n  transform: any;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === 'right') {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === 'right') {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum AlignmentTypes {\n  left = 'left' as any,\n  center = 'center' as any,\n  right = 'right' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: any;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show = new EventEmitter();\n  @Output() hide = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: any;\n  private timeout: any;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate\n      ? 0\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() type = 'standard';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circle: any; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): {} {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): any {\n    const seriesName = this.data.name;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === 'time') {\n      cx = this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === 'linear') {\n      if (this.type === 'standard') {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: any, max: any) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx;\n  @Input() cy;\n  @Input() r;\n  @Input() fill;\n  @Input() stroke;\n  @Input() data;\n  @Input() classNames;\n  @Input() circleOpacity;\n  @Input() pointerEvents;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() path;\n  @Input() width;\n  @Input() height;\n  @Input() x;\n  @Input() y;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: any[];\n\n  @Input()\n  data;\n\n  @Input()\n  dims;\n\n  @Input()\n  xScale;\n\n  @Input()\n  yScale;\n\n  @Input()\n  orient;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): any[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = 'odd';\n\n      if (this.orient === 'vertical') {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === 'horizontal') {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = 'vertical';\n  @Input() name;\n  @Input() stops: any[];\n\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === 'horizontal') {\n      this.x2 = '100%';\n    } else if (this.orientation === 'vertical') {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): any[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: any[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: any[];\n  private stopsDefault: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data;\n  @Input() path;\n  @Input() startingPath;\n  @Input() fill;\n  @Input() opacity = 1;\n  @Input() startOpacity = 0.5;\n  @Input() endOpacity = 1;\n  @Input() activeLabel;\n  @Input() gradient: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: ` {{ value }} `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: any[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims;\n  @Input() xSet;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results;\n  @Input() colors;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  getValues(xVal): any[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === 'linear') {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: any): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { id } from '../..//utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view;\n  @Input() state;\n  @Input() results;\n  @Input() scheme;\n  @Input() customColors;\n  @Input() legend;\n  @Input() miniChart;\n  @Input() autoScale;\n  @Input() scaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: any;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: any;\n  filter: any;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', ({ d3selection }) => {\n        const selection = d3selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element).select('.brush').call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): any {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data;\n  @Input() title;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  legendEntries: any[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): any[] {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: any;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() horizontal = false;\n\n  gradient: any;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data;\n  @Input() colors;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  legendItems: any[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): any {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item) {\n    return item.formattedLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","export let colorSets = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: 'Ordinal',\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: any;\n  colorDomain: any[];\n  domain: any;\n  customColors: any;\n\n  constructor(scheme, type, domain, customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === 'quantile') {\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear().domain(points).range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType = true): string {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() state;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: string;\n  series: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): string {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (!this.isDate(value)) {\n        date = false;\n      }\n      if (typeof value !== 'number') {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return 'time';\n    }\n\n    if (num) {\n      return 'linear';\n    }\n\n    return 'ordinal';\n  }\n\n  isDate(value): boolean {\n    if (value instanceof Date) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    return [0, 100];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\n\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() baseValue: any = 'auto';\n  @Input() colors;\n  @Input() scaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient;\n  @Input() curve;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill;\n  @Input() data: any;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: any;\n  path: any;\n  gradientId: any;\n  gradientFill: any;\n  startOpacity: any;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === 'vertical') {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === 'horizontal') {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar() {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === 'vertical' && this.height === 0) ||\n        (this.orientation === 'horizontal' && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    return [0, 100];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: any[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType = 'ordinal';\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    return [0, 100];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === 'standard') {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { D0Types } from './series-vertical.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === 'standard') {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\n\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\n  let domain: number[] = [];\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\n  let scale: any;\n\n  if (scaleType === 'time') {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius = 10;\n  @Input() minRadius = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType = 'ordinal';\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: any;\n  @Input() yScaleMax: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType = 'linear';\n  margin = [10, 20, 10, 20];\n  bubblePadding = [0, 0, 0, 0];\n  data: any;\n\n  legendOptions: any;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: any[];\n  xDomain: any[];\n  yDomain: any[];\n  rDomain: number[];\n\n  xScaleType: string;\n  yScaleType: string;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear().range(range).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): any {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): number[] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType;\n  @Input() yScaleType;\n  @Input() colors;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() data;\n  @Input() label;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  activeRange: any[];\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: any[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  cells: any[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item): string {\n    return item.tooltipText;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: any[];\n  yDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  color: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: any[];\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  scaleType: string = 'linear';\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === 'linear') {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): any {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects(): any[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path;\n  @Input() stroke;\n  @Input() data;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() autoScale;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  series: any;\n  areaPath: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  stroke: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  series: any; // ???\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    switch (this.scaleType) {\n      case 'time':\n        return scaleTime().range([0, width]).domain(domain);\n      case 'linear':\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === 'ordinal') {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n}\n","export function isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: any[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === 'linear';\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === 'time') {\n      return this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === 'linear') {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  data: any;\n  dims: ViewDimensions;\n  domain: any[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { arc } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data;\n  @Input() radius;\n  @Input() label;\n  @Input() color;\n  @Input() max;\n  @Input() value;\n  @Input() explodeSlices;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n\n  constructor() {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  get styleTransform(): string {\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n  }\n\n  get attrTransform(): string {\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\n  }\n\n  get textTransition(): string {\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\n  }\n\n  textAnchor(): any {\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius;\n  @Input() outerRadius;\n  @Input() cornerRadius: number = 0;\n  @Input() value;\n  @Input() max;\n  @Input() data;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels = false;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() explodeSlices = false;\n  @Input() doughnut = false;\n  @Input() arcWidth = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: any;\n  colors: ColorHelper;\n  domain: any;\n  dims: any;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: 'ordinal',\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\n\nexport function gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: any[];\n  transform: string;\n  series: any[];\n  domain: any[];\n  colorScale: ColorHelper;\n  margin = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data;\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: any;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): any[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): any {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() series: any = [];\n  @Input() dims;\n  @Input() innerRadius = 60;\n  @Input() outerRadius = 80;\n  @Input() explodeSlices;\n  @Input() showLabels;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color;\n  @Input() bandColor;\n  @Input() textColor;\n\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() data;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: any;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding = [10, 20, 5, 20];\n  labelFontSize = 15;\n\n  bandPath: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : this.data.name;\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        this.scaleText();\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\n\nexport interface CardModel {\n  x;\n  y;\n  width: number;\n  height: number;\n  color: string;\n  label: string;\n  data;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: any[];\n  @Input() slots: any[];\n  @Input() dims;\n  @Input() colors;\n  @Input() innerPadding = 15;\n\n  @Input() cardColor;\n  @Input() bandColor;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): any[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: any[];\n  slots: any[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin = [10, 10, 10, 10];\n\n  backgroundCards: any[];\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data;\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() value;\n  @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: any[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() dims;\n  @Input() colors;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): any[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n  }\n\n  getTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: any;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: any;\n  margin = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: any[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText('value');\n      this.scaleText('units');\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n    setTimeout(() => this.scaleText('value'), 50);\n    setTimeout(() => this.scaleText('units'), 50);\n  }\n\n  getValueDomain(): any[] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === 'value') {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === 'value') {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: any[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: any[];\n  displayValue: string;\n  legendOptions: any;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item): string {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: any;\n  @Input() valueArc: any;\n  @Input() cornerRadius: any;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: any;\n  @Input() smallSegments: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: any;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: any;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): any {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = 'middle';\n    if (angle > 45 && angle <= 135) {\n      textAnchor = 'start';\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = 'end';\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function (label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n"]}